apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  labels:
    mdaihub-name: mdaihub-sample
  name: gateway
  namespace: mdai
spec:
  managementState: managed
  image: otel/opentelemetry-collector-contrib:0.118.0
  replicas: 5
  resources:
    limits:
      memory: "256Mi"
      cpu: "200m"
    requests:
      memory: "128Mi"
      cpu: "100m"
  envFrom:
    - configMapRef:
        name: mdaihub-sample-automation
  config:
    receivers:
      fluentforward:
        endpoint: '0.0.0.0:8006'
      otlp:
        protocols:
          grpc:
            endpoint: '0.0.0.0:4317'
          http:
            endpoint: '0.0.0.0:4318'
            # Since this collector needs to receive data from the web, enable cors for all origins
            # `allowed_origins` can be refined for your deployment domain
            cors:
              allowed_origins:
                - "http://*"
                - "https://*"

    extensions:
      # The health_check extension is mandatory for this chart.
      # Without the health_check extension the collector will fail the readiness and liveliness probes.
      # The health_check extension can be modified, but should never be removed.
      health_check:
        endpoint: "${env:MY_POD_IP}:13133"

    processors:
      memory_limiter:
        check_interval: 23s
        limit_percentage: 75
        spike_limit_percentage: 15

      batch:
        send_batch_size: 1000
        send_batch_max_size: 10000
        timeout: 13s

      deltatocumulative: {}

      groupbyattrs:
        keys:
          - mdai_service

      resource/observer_receiver_tag:
        attributes:
          - key: observer_direction
            value: "received"
            action: upsert

      resource/observer_exporter_tag:
        attributes:
          - key: observer_direction
            value: "exported"
            action: upsert

      filter/severity:
        error_mode: ignore
        logs:
          log_record:
            - 'attributes["level"] == "INFO"'
      
      # UNCOMMENT THE FOLLOWING LINE TO ADD FILTER PROCESSOR
      # filter/service_list:
      #   error_mode: ignore
      #   logs:
      #     log_record:
      #       - '${env:SERVICE_LIST_REGEX}" != "" and IsMatch(attributes["mdai_service"], "${env:SERVICE_LIST_REGEX}")'

      
      transform/severity:
        error_mode: ignore
        log_statements:
          - context: log
            statements:
            - set(severity_number, 17) where attributes["level"] == "ERROR"
            - set(severity_number, 13) where attributes["level"] == "WARNING"
            - set(severity_number, 9) where attributes["level"] == "INFO"
            - set(severity_number, 5) where attributes["level"] == "DEBUG"
            - set(severity_text, "ERROR") where attributes["level"] == "ERROR"
            - set(severity_text, "WARNING") where attributes["level"] == "WARNING"
            - set(severity_text, "INFO") where attributes["level"] == "INFO"
            - set(severity_text, "DEBUG") where attributes["level"] == "DEBUG"

    exporters:
      otlp/observer:
        endpoint: sample-mdai-observer-service.mdai.svc.cluster.local:4317
        tls:
          insecure: true
      prometheus:
        endpoint: 0.0.0.0:8899
        metric_expiration: 180m
        resource_to_telemetry_conversion:
          enabled: true

    connectors:
      count:
        logs:
          error_logs_by_service_total:
            description: Counted error logs
            conditions:
              - severity_number >= SEVERITY_NUMBER_ERROR
            attributes:
              - key: mdai_service
                default_value: ""

    service:
      telemetry:
        resource:
          mdai-logstream: collector
        logs:
          processors:
            - batch:
                exporter:
                  otlp:
                    protocol: http/protobuf
                    endpoint: http://hub-monitor-mdai-collector-service.mdai.svc.cluster.local:4318
        metrics:
          address: ":8888"
      extensions:
        - health_check
      pipelines:
        logs/customer_pipeline:
          receivers: [ otlp, fluentforward ]
          processors: [
            # UNCOMMENT THE FOLLOWING LINE TO START FILTRATION
            # filter/service_list,
            # DO NOT CHANGE ORDER
            resource/observer_exporter_tag,
            groupbyattrs,
            memory_limiter,
            # DO NOT CHANGE ORDER
            # batch must be last in processor list
            batch
          ]
          exporters: [ otlp/observer ]

        logs/watch_receivers:
          receivers: [ otlp, fluentforward ]
          processors: [
            resource/observer_receiver_tag,
            groupbyattrs,
            memory_limiter,
            # DO NOT CHANGE ORDER
            # batch must be last in processor list
            batch
          ]
          exporters: [ otlp/observer ]
          
        logs/counts:
          receivers: [ otlp, fluentforward ]
          processors: [transform/severity, batch]
          exporters: [ count ]

        metrics/log_counts:
          receivers: [count]
          processors: [batch, deltatocumulative]
          exporters: [prometheus]

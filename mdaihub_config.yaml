apiVersion: hub.mydecisive.ai/v1
kind: MdaiHub
metadata:
  labels:
    app.kubernetes.io/name: mdai-operator
    app.kubernetes.io/managed-by: kustomize
  name: mdaihub-sample
  namespace: mdai
spec:
  variables:
    # storageKey is how this variable will be referenced elsewhere in MDAI configs. Must be unique among configured variables.
    - storageKey: service_list
    # defaultValue is optional. It is the value that the variable is initialized with. For variables of type set, the value is initialized as the first member of the set.
      defaultValue: "n/a"
      # serializeAs clauses define how the variable is implemented in the k8s configMap
      serializeAs:
      # name is a name provided for the environment variable version of the immediate parent variable. Must be unique among all environment variables.
        - name: "SERVICE_LIST_REGEX"
        # transformer is a programmatic transformation applied to the runtime value of the variable before setting the value in the k8s configMap
          transformer:
          # join the values of the variable into a single string
            join:
            # delimiter insert this delimiter string between values as they're joined
              delimiter: "|"
        - name: "SERVICE_LIST_CSV"
          transformer:
            join:
              delimiter: ","
      # below properties are optional
      type: set
      storageType: "mdai-valkey"
    - storageKey: team_list
      defaultValue: "n/a"
      serializeAs:
        - name: "TEAM_LIST_REGEX"
          transformer:
            join:
              delimiter: "|"
        - name: "TEAM_LIST_CSV"
          transformer:
            join:
              delimiter: ","
      # below properties are optional
      type: set
      storageType: "mdai-valkey"

  evaluations:
    # name required. must be unique across evaluations
    - name: top_talkers
      # type required. only one type supported for 0.6.0
      type: mdai/prometheus_alert
      # expr a valid PromQL query expression
      expr: 'increase(bytes_received_by_service_total{logger!=""}[5m]) > 5*1024*1024'
      # severity alert severity
      severity: warning
      # onStatus Prometheus alerts will indicate a status of `firing` or `resolved`. An action may be configured for one or both events, but one must be configured for at least one.
      onStatus:
      # firing the status indicated when the conditions of the expr and for fields are met.
        firing:
        # variableUpdate the type of action to be performed.
          variableUpdate:
          # variableRef the storageKey of the variable to be updated.
            variableRef: service_list
            # operation the operation that will update the variable
            operation: mdai/add_element
        resolved:
          variableUpdate:
            variableRef: service_list
            operation: mdai/remove_element
      # Optional below here
      # for condition described by the expr must be true for this long before the alert fill fire
      for: 1m
      # keep_firing_for once the alert is sent with a status of `firing`, it will persist for this long
      keep_firing_for: 10m
      # relevantLabels names of fields attached to the alert whose values will be provided to the configured actions
      # for example, in this configured evaluation, the `expr` will be true on a per `logger` basis, so indicating `logger` in `relevantLabels` will ensure that when the `expr` is true for a given `logger` that value will be added to the `service_list` runtime value
      relevantLabels:
        - "logger"
    - name: top_listeners
      type: mdai/prometheus_alert
      expr: 'increase(bytes_sent_by_service_total{logger!=""}[5m]) > 10*1024*1024'
      severity: warning
      for: 15m
      keep_firing_for: 10m
    - name: top_team_talkers
      type: mdai/prometheus_alert
      expr: 'increase(bytes_received_by_team_region_total{team!=""}[1h]) > 10*1024*1024'
      severity: warning
      for: 3m
      keep_firing_for: 10m
      relevantLabels:
        - "team"
      onStatus:
        firing:
          variableUpdate:
            variableRef: team_list
            operation: mdai/add_element
        resolved:
          variableUpdate:
            variableRef: team_list
            operation: mdai/remove_element

  observers:
    # name required. must be unique across observers
    - name: observer1
      # resourceRef correctly maps the observers to their observer resource
      resourceRef: observer-collector
      # labelResourceAttributes keys on the telemetry records being observed. These keys will be used in groupbyattrs processor to group the telemetry records before calculating metrics.
      labelResourceAttributes:
        - logger
      # countMetricName if populated, designates the name of the metric in prometheus that represents the count of indicated telemetry
      countMetricName: items_received_by_service_total
      # bytesMetricName if populated, designates the name of the metric in prometheus that represnets the calculated size in bytes of the indicated telemetry
      bytesMetricName: bytes_received_by_service_total
      # filter Optional. config for an opentelemetry filter processor
      filter:
        error_mode: ignore
        logs:
          log_record:
            - 'resource.attributes["observer_direction"] != "received"'
    - name: observer2
      resourceRef: observer-collector
      labelResourceAttributes:
        - logger
      countMetricName: items_sent_by_service_total
      bytesMetricName: bytes_sent_by_service_total
      filter:
        error_mode: ignore
        logs:
          log_record:
            - 'resource.attributes["observer_direction"] != "exported"'
    - name: team-region-received
      resourceRef: observer-collector
      labelResourceAttributes:
        - region
        - team
      countMetricName: items_sent_by_team_region_total
      bytesMetricName: bytes_sent_by_team_region_total
      filter:
        error_mode: ignore
        logs:
          log_record:
            - 'resource.attributes["observer_direction"] != "exported"'

  observerResources:
    - name: observer-collector
      image: public.ecr.aws/decisiveai/watcher-collector:0.1.3
      replicas: 3
      resources:
        limits:
          memory: "512Mi"
          cpu: "200m"
        requests:
          memory: "128Mi"
          cpu: "100m"